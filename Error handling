//require statement
pragma solidity ^0.5.0;
contract requireStatement {
function checkInput(uint _input) public view returns(string memory){
require(_input >= 0, "invalid uint8");
require(_input <= 255, "invalid uint8");
return "Input is Uint8";
}
// Defining function to use require statement
function Odd(uint _input) public view returns(bool){
require(_input % 2 != 0);
return true;
}
}

//assert statement
pragma solidity ^0.5.0;
contract assertStatement {
bool result;
// Defining a function to check condition
function checkOverflow(uint _num1, uint _num2) public {
uint sum = _num1 + _num2;
assert(sum<=255);
result = true;
}
// Defining a function to print result of assert statement
function getResult() public view returns(string memory){
if(result == true){
return "No Overflow";
}
else{
return "Overflow exist";
}
}
}

//revert statement
pragma solidity ^0.5.0;
contract revertStatement {

function checkOverflow(uint _num1, uint _num2) public view returns(string memory, uint){
uint sum = _num1 + _num2;
if(sum < 0 || sum > 255){
revert(" Overflow Exist");
}
else{
return ("No Overflow", sum);
}
}
}
}
